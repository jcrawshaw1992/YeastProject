/*

PeriodicRectangleMeshGenerator

*/

#ifndef PeriodicRectangleMeshGenerator_HPP_
#define PeriodicRectangleMeshGenerator_HPP_

#include <cmath>
#include <vector>

#include "MutableMesh.hpp"

/**
 * Honeycomb mesh generator that creates a 2D honeycomb surface mesh (with equal distance
 * between nodes) for use in Vascular remodelling simulations.
 *
 * NOTE: the user should delete the mesh after use to manage memory.
 */
class PeriodicRectangleMeshGenerator
{
protected:

    /** A pointer to the mesh this class creates */
    MutableMesh<2,3>* mpMesh;

    /** The mesh is generated by writing out a series of nodes and reading them in from this file*/
    std::string mMeshFilename;

public:

    /**
     * Default constructor.
     *
     * @param numNodesAround  The number of cells you want around the cylinder
     * @param numNodesAlongLength  The number of cells you want sides of the domain
     * @param radius radius of cylinder
     * @param scaleFactor length of cylinder
     */
    PeriodicRectangleMeshGenerator(unsigned numNodesAround, unsigned numNodesAlongLength, double radius, double length);

    /**
     * Null constructor for derived classes to call.
     */
    PeriodicRectangleMeshGenerator()
    {
    }


    std::vector<unsigned > mBoundaryVector;

    std::vector<unsigned > GetBoundaryVector();

    /**
     * Destructor - deletes the mesh object and pointer
     */
    virtual ~PeriodicRectangleMeshGenerator();

    /**
     * @return a the cylinder mesh
     */
    virtual MutableMesh<2,3>* GetMesh();
};

#endif /*HONEYCOMB3DCYLINDRICALMESHGENERATOR_HPP_*/
