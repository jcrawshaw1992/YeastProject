#!/usr/bin/env python
#
import subprocess
import vtk
import os
import pdb
import string
import math as m

import array as A
# from vtk import vtkXMLUnstructuredGridWriter as Writer, VTK_VERSION
# from vtk.util.numpy_support import numpy_to_vtk, numpy_to_vtkIdTypeArray
import numpy as np
import meshio
from vtk.util import numpy_support
import vtk

import math
import ConvertVTKtoSTL
from os import path

# from vtk.numpy_interface import dataset_adapter as dsa


if __name__=="__main__":
  
    print " The mesh generated by this code is for a HemeLB mesh, not okay for Chaste"
    CPP_Centerlines_vtp_writer = "/Users/jcrawshaw/Chaste/projects/VascularRemodelling/build/optimised/GenerateIdealVascularMesh/Test_VTP_writer_WithCollapseRunner"
    CPP_Centerlines_vtp_writer = "/home/vascrem/Chaste/projects/VascularRemodelling/build/optimised/GenerateIdealVascularMesh/Test_VTP_writer_WithCollapseRunner"

    Directory = "/Users/jcrawshaw/docker-polnet-master/"
    Directory = "/Users/jcrawshaw/Downloads/CollapseWithAngleVariation/"
 
    # # # # Set up the points for the centerlines and write into a file to be read in cpp 

    Collapse = [0.55,0.56,0.57,0.58,0.59,0.6,0.61,0.62,0.63,0.64,0.65]
    B=1
    Angle = [3,5] # m.pi/3]#,
    for i in Collapse:
        for alpha in Angle:
            CenterLines_filename = Directory + "Centerlines_A"+str(alpha)+"_C"+str(i)+".vtp"
            VTK_Mesh = Directory+"Meshinital_A"+str(alpha)+"_C"+str(i)+".vtk"
            VTK_Meshremeshed = Directory+"Mesh_A"+str(alpha)+"_C"+str(i)+".vtk"
            Clipped_Mesh = Directory+"MeshClipped_A"+str(alpha)+"_C"+str(i)+".vtk"
        
            Outputstl = Directory+"Mesh_A"+str(alpha)+"_C"+str(i)+".stl" 
            Outputvtu = Directory+"Mesh_A"+str(alpha)+"_C"+str(i)+".vtu" 

            ScaledMesh = Directory+"ScaledMesh_A"+str(alpha)+"_C"+str(i)+".vtu"
            ScaledMeshstl = Directory+"Scaledmesh_A"+str(alpha)+"_C"+str(i)+".stl"
           

            command = 'meshio-convert  ' + Outputstl + ' ' +Outputvtu
            subprocess.call(command, shell=True)

 
# vtk-polydata-to-vtu.py

    print " Finished Creating files "